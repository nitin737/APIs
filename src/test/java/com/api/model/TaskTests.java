package com.api.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TaskTests {

    @Test
    void testDefaultConstructor() {
        Task task = new Task();
        assertNull(task.getId(), "ID should be null for default constructor");
        assertNull(task.getName(), "Name should be null for default constructor");
        assertNull(task.getDescription(), "Description should be null for default constructor");
        assertFalse(task.isCompleted(), "Completed should be false for default constructor");
    }

    @Test
    void testParameterizedConstructor() {
        String name = "Test Task";
        String description = "Test Description";
        boolean completed = true;

        Task task = new Task(name, description, completed);

        assertNull(task.getId(), "ID should be null as it's generated by persistence");
        assertEquals(name, task.getName(), "Name should match constructor argument");
        assertEquals(description, task.getDescription(), "Description should match constructor argument");
        assertEquals(completed, task.isCompleted(), "Completed status should match constructor argument");
    }

    @Test
    void testIdGetterSetter() {
        Task task = new Task();
        Long idValue = 1L;
        task.setId(idValue);
        assertEquals(idValue, task.getId(), "Getter should return the value set by setter for ID");
    }

    @Test
    void testNameGetterSetter() {
        Task task = new Task();
        String nameValue = "New Task Name";
        task.setName(nameValue);
        assertEquals(nameValue, task.getName(), "Getter should return the value set by setter for Name");
    }

    @Test
    void testDescriptionGetterSetter() {
        Task task = new Task();
        String descriptionValue = "New Task Description";
        task.setDescription(descriptionValue);
        assertEquals(descriptionValue, task.getDescription(), "Getter should return the value set by setter for Description");
    }

    @Test
    void testCompletedGetterSetter() {
        Task task = new Task();
        task.setCompleted(true);
        assertTrue(task.isCompleted(), "Getter should return true after setting completed to true");
        task.setCompleted(false);
        assertFalse(task.isCompleted(), "Getter should return false after setting completed to false");
    }

    @Test
    void testToString() {
        String name = "TaskToString";
        String description = "DescToString";
        Task task = new Task(name, description, false);
        task.setId(100L); // Set an ID to make toString more complete for testing

        String taskString = task.toString();

        assertTrue(taskString.contains("id=100"), "toString should contain the ID");
        assertTrue(taskString.contains("name='TaskToString'"), "toString should contain the name");
        assertTrue(taskString.contains("description='DescToString'"), "toString should contain the description");
        assertTrue(taskString.contains("completed=false"), "toString should contain the completed status");
    }
}
