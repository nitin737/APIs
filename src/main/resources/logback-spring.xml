<configuration>

    <property name="LOGS_DIR" value="logs"/>
    <property name="LOG_FILE_NAME" value="application"/>
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"/>
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_DIR}/${LOG_FILE_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOGS_DIR}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- keep 30 days' worth of history -->
            <maxHistory>30</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>

    <!-- Application specific loggers -->
    <logger name="com.api" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </logger>

    <!-- Spring framework loggers -->
    <logger name="org.springframework" level="INFO"/>
    <logger name="org.springframework.web" level="INFO"/>
    <logger name="org.springframework.boot" level="INFO"/>
    <logger name="org.hibernate" level="INFO"/>

    <!--
        Centralized Logging Consideration:
        The file appender (FILE) configured above writes logs to ${LOGS_DIR}/${LOG_FILE_NAME}.log.
        In a microservices or distributed environment, these log files can be collected by a log shipper
        (e.g., Filebeat, Fluentd, Promtail) and forwarded to a centralized logging system
        (e.g., ELK Stack - Elasticsearch, Logstash, Kibana; or Grafana Loki).
        This allows for aggregated log analysis, searching, and monitoring across multiple services.
        No changes are needed to the application's logging code itself to integrate with such a system,
        only deployment-level configuration of the log shipper.
    -->
</configuration>
